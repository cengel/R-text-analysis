[
["index.html", "Text Analysis with R Prerequisites References", " Text Analysis with R Claudia Engel, Scott Bailey Last updated: April 29, 2019 Prerequisites You should have some basic knowledge of R, and be familiar with the topics covered in the Introduction to R. Have a recent version of R and RStudio installed. Libraries: tidyverse tidytext readtext sotu SnowballC widyr igraph ggraph tm quanteda ? cleanNLP ? References Feinerer, I., Hornik, K., and Meyer, D. (2008). Text Mining Infrastructure in R. Journal of Statistical Software, 25(5), 1 - 54. doi:http://dx.doi.org/10.18637/jss.v025.i05 Gries, Stefan Thomas, 2009: Quantitative Corpus Linguistics with R: A Practical Introduction. Routledge. Silge, J and D. Robinson, 2017: Text Mining with R: A Tidy Approach Kasper Welbers, Wouter Van Atteveldt &amp; Kenneth Benoit (2017) Text Analysis in R, Communication Methods and Measures, 11:4, 245-265, DOI: 10.1080/19312458.2017.1387238 CRAN Task View: Natural Language Processing "],
["textanalysis.html", "Chapter 1 Analysing Texts 1.1 Reading text into R 1.2 String operations 1.3 Tokenize, lowercase 1.4 Stopwords 1.5 Word Stemming", " Chapter 1 Analysing Texts Learning Objectives to come We’ll use several libraries today. sotu will provide the metadata and text of State of the Union speeches ranging from George Washington to Barack Obama. tidyverse provides many of the standard “verbs” for working with our data. tidytext provides specific functions for a “tidy” approach to working with textual data. readtext provides a function well suited to reading textual data from a large number of formats into R. library(sotu) library(tidyverse) library(tidytext) library(readtext) 1.1 Reading text into R First, let’s look at the data in the sotu package. The metadata and texts come separately. We’ll use the supplied metadata object, but we’re going to use a utility function (sotu_dir) in the package to write the texts to disk so that we can practice reading text files from disk. # Let&#39;s take a quick look at the state of the union metadata summary(sotu_meta) # sotu_dir writes the text files to a temporary dir, but you could specific where you want them. fp &lt;- sotu_dir() head(fp) Now that we have the files on disk, and a list of filepaths stored in the fp variable, we can use readtext to read the texts into a new variable. # let&#39;s then read in the files with readtext texts &lt;- readtext(fp) head(texts) So that we can work with a single tabular dataset with a tidy approach, we’ll convert the metadata and text tables to tibbles, and combine them into a single tibble. You can see that our texts are organized by alphabetical order, so first we’ll need to sort our metadata to match. sotu_meta_tib &lt;- as_tibble(sotu_meta) %&gt;% arrange(president) head(sotu_meta_tib) # We can now combine the sotu metadata with the texts # first, we&#39;ll turn both pieces of data into tibbles, then combine sotu_texts &lt;- as_tibble(texts) sotu_whole &lt;- bind_cols(sotu_meta_tib, sotu_texts) glimpse(sotu_whole) Now that we have our data, we need to think about cleaning it. Depending on the quality of your data, you might need to explicitly replace certain characters or words, remove urls or types of numbers, such as phone numbers, or otherwise clean up misspellings or errors. There are several ways to handle this sort of cleaning, but we’ll look at some straightforward string manipulation and replacement. 1.2 String operations R has many functions available to manipulate strings including functions like grep and paste, which come with the R base install. Perhaps one of the most comprehensive packages is stringi. However, we will here take a look at the stringr package, which is part of the tidyverse, wraps a lot of the stringi functions, and is easier to begin with. Below are a examples for a few functions that might be useful. How many words in each speech? str_count(sotu_whole$text, boundary(&quot;word&quot;)) Measured by the average number of words per sentence for each speech - what is the length of the speech with the shortest/longest sentences? range(str_count(sotu_whole$text, boundary(&quot;word&quot;))/str_count(sotu_whole$text, boundary(&quot;sentence&quot;))) How man times does the word “citizen” appear in the speeches? str_count(sotu_whole$text, &quot;[C|c]itizen&quot;) What are the names of the documents in of the speeches where the word “citizen” does not occur? sotu_whole$doc_id[!str_detect(sotu_whole$text, &quot;[C|c]itizen&quot;)] Get me the first 5 words for each speech word(sotu_whole$text, end = 5) %&gt;% unique() Now remove newline character (\\n) and get rid of the leading white space: word(sotu_whole$text, end = 5) %&gt;% unique() %&gt;% str_replace_all(&quot;\\\\n&quot;, &quot; &quot;) %&gt;% str_trim() (For spell checks take a look at https://CRAN.R-project.org/package=spelling or https://CRAN.R-project.org/package=hunspell) 1.3 Tokenize, lowercase A very common part of data cleaning involves tokenization. While our data is already “tidy” insofar as each row is a single observation, a single text with metdata, the tidytext approach goes a step further to make each word it’s own observation with metadata. We could write our own function to do this using a tokenizer, but tidytext provides a handy utility function just for this purpose. tidy_sotu &lt;- sotu_whole %&gt;% unnest_tokens(word, text) tidy_sotu Before we move on, we should note that the unnest_tokens function didn’t just tokenize our texts at the word level. It also lowercased each word, and it could do quite a bit more. For instance, we could tokenize the text at the level of ngrams or sentences, if those are the best units of analysis for our work. We could also leave punctuation, which has been removed by default. Depending on what you need to do for analysis, you use do these operations during this step, or write custom functions and do it before you unnest tokens. # Word tokenization with punctuation tidy_sotu_w_punct &lt;- sotu_whole %&gt;% unnest_tokens(word, text, strip_punct = FALSE) tidy_sotu_w_punct # Sentence tokenization tidy_sotu_sentences &lt;- sotu_whole %&gt;% unnest_tokens(sentence, text, token = &quot;sentences&quot;, to_lower = FALSE) tidy_sotu_sentences # N-gram tokenization tidy_sotu_trigram &lt;- sotu_whole %&gt;% unnest_tokens(trigram, text, token = &quot;ngrams&quot;, n = 3) tidy_sotu_trigram 1.4 Stopwords Another common type of cleaning in text analysis is to remove stopwords, or common words that theoretically provide less information about the content of a text. Depending on the type of analysis you’re doing, you might leave these words in or use a highly curated list of stopwords. For now, as we move toward looking at words in documents based on frequency, we will remove some standard stopwords using a tidytext approach. First, let’s look at the stopwords that tidytext gives us to get a sense of what they are. data(stop_words) head(stop_words, n = 60) You can see that we now have one word per row with associated metadata. We can now remove stopwords using an anti-join. tidy_sotu_words &lt;- tidy_sotu %&gt;% anti_join(stop_words) tidy_sotu_words We went from 1965212 to 778161 rows, which means we had a lot of stopwords in our corpus. This is a huge removal, so for serious analysis, we might want to take a closer look at the stopwords and determine if we should use a different stopword list or otherwise create our own. 1.5 Word Stemming Another thing you may want to do is to stem your words, that is, to reduce them to their word stem or root form, like reducing fishing, fished, and fisher to the stem fish. tidytext does not implement its own word stemmer. Instead it relies on separate packages like hunspell or SnowballC. We will give an example here for the SnowballC package. (hunspell appears to run much slower, and it also returns a list instead of a vector, so in this context SnowballC seems to be more convenient.) library(SnowballC) tidy_sotu_words %&gt;% mutate(word_stem = wordStem(word)) %&gt;% head() For lemmatization, you may want to take a look a the koRpus package, another comprehensive R package for text analysis. It allows to use TreeTagger, a widely used part-of-speech tagger. For full functionality of the R package a local installation of TreeTagger is recommended. Now that we’ve read in our text and metadata, reshaped it a bit into the tidytext format, and cleaned it a bit while doing so, let’s move on to some basic analysis. TODO?: Tag text with cleanNLP maybe? "],
["textprep.html", "Chapter 2 Preparing Textual Data 2.1 Frequencies 2.2 Term frequency 2.3 Tf-idf 2.4 N-Grams 2.5 Co-ocurrcence 2.6 Document-Term Matrix 2.7 Sentiment analysis", " Chapter 2 Preparing Textual Data Learning Objectives to come First, we’ll load the libraries we need. library(tidyverse) library(tidytext) Let’s remind ourselves of what our data looks like. tidy_sotu_words 2.1 Frequencies Since our unit of analysis at this point is a word, let’s do some straightforward counting to figure out which words occur most frequently in the corpus as a whole. tidy_sotu_words %&gt;% count(word, sort = TRUE) We could start adding in a bit of visualization here. Let’s show the most frequent words that occur more than 2000 times. tidy_sotu_words %&gt;% count(word, sort = TRUE) %&gt;% filter(n &gt; 2000) %&gt;% mutate(word = reorder(word, n)) %&gt;% ggplot(aes(word, n)) + geom_col() + xlab(NULL) + coord_flip() What if we’re interested in most used words per speech? # Count words by book doc_words &lt;- tidy_sotu_words %&gt;% count(doc_id, word, sort = TRUE) # Calculate the total number of words by book and save them to a tibble total_words &lt;- doc_words %&gt;% group_by(doc_id) %&gt;% summarize(total = sum(n)) # Join the total column with the rest of the data so we can calculate frequency doc_words &lt;- left_join(doc_words, total_words) #&gt; Joining, by = &quot;doc_id&quot; doc_words Let’s graph the top words per book doc_words %&gt;% filter(n &gt; 100) %&gt;% ggplot(aes(word, n, fill = doc_id)) + geom_col() + xlab(NULL) + coord_flip() That’s cool looking, but let’s split it into facets so we can see by speech. doc_words %&gt;% filter(n &gt; 100) %&gt;% ggplot(aes(word, n, fill = doc_id)) + geom_col(show.legend = FALSE) + xlab(NULL) + facet_wrap(~doc_id, ncol = 2) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) We could keep cleaning this figure up by setting some minimum sizing, determining the spacing between y-axis labels better, and so forth, but now we’ll accept it as showing some sense of variation across speeches where certain words are used most. What if we want to check the most highly common words per speech for a single president? We could filter this doc_words dataset based on the president’s name being in the doc_id, but I think it’s easier to filter from the initial tidy data and recount. tidy_sotu_words %&gt;% filter(president == &quot;Barack Obama&quot;) %&gt;% count(doc_id, word, sort = TRUE) %&gt;% filter(n &gt; 20) %&gt;% ggplot(aes(word, n, fill=doc_id)) + geom_col() + facet_wrap(~doc_id, ncol = 2) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) 2.2 Term frequency Sometimes, a raw count of a word is less important than understanding how often that word appears in respect to the total number of words in a text. This ratio would be the term frequency. doc_words &lt;- doc_words %&gt;% mutate(term_freq = n / total) doc_words Let’s graph the term frequency for one of these speeches so we can understand the frequency distribution of words over a text. doc_words %&gt;% filter(doc_id == &quot;harry-s-truman-1946.txt&quot;) %&gt;% ggplot(aes(term_freq)) + geom_histogram(show.legend = FALSE) + xlim(NA, .012) #&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. #&gt; Warning: Removed 2 rows containing non-finite values (stat_bin). #&gt; Warning: Removed 1 rows containing missing values (geom_bar). This should make sense. Most words are used relatively rarely in a text. Only a few have a high term frequency. We could keep filtering this data to see which terms have the high frequency, thus maybe increased significance, for different presidents and different particular speeches. We could also subset based on decade, and get a sense of what was important in each decade. We’re going to take a slightly different approach though. We’ve been looking at term frequency per document. What if we want to know about words that seem more important based on the contents of the entire corpus? 2.3 Tf-idf For this, we can use term-frequency according to inverse document frequency (tf-idf). Tf-idf meansures how important a word is within a corpus by scaling term frequency per document according to the inverse of the term’s document frequency (how many documents within the corpus in which the term appears divided by the number of documents). We could write our own function for tf-idf, but in this case we’ll take advantage of tidytext’s implementation. doc_words &lt;- doc_words %&gt;% bind_tf_idf(word, doc_id, n) doc_words The tf-idf value will be: lower for words that appear in many documents in the corpus, and lowest when the word occurs in virtually all documents. high for words that appear many times in few documents in the corpus, this lending high discrimiatory power to those doucments. Let’s look at some of the words in the corpus that have the highest tf-idf scores, which means words that are particularly distinctive for their documents. doc_words %&gt;% select(-total) %&gt;% arrange(desc(tf_idf)) These results seem appropriate given our history. To understand the occurence of the years we might need to look more closely at the speeches themselves, and determine whether the years are significant or whether they need to be removed from the text. It might be that even if they don’t need to be removed from the text overall, they still need to be filtered out within the context of this analysis. In the same way that we narrowed our analysis to Obama speeches earlier, we could subset the corpus before we calculate the tf-idf score to understand which words are most important for a single president within their sotu speeches. Let’s do that for Obama. obama_tf_idf &lt;- tidy_sotu_words %&gt;% filter(president == &quot;Barack Obama&quot;) %&gt;% count(doc_id, word, sort = TRUE) %&gt;% bind_tf_idf(word, doc_id, n) %&gt;% arrange(desc(tf_idf)) obama_tf_idf Based on what you know of the Obama years and sotu speeches generally, how would you interpret these results? Let’s try graphing these results, showing the top tf-idf terms per speech for Obama’s speeches. obama_tf_idf %&gt;% group_by(doc_id) %&gt;% mutate(word = factor(word, levels = rev(unique(word)))) %&gt;% group_by(doc_id) %&gt;% top_n(5) %&gt;% ungroup() %&gt;% ggplot(aes(word, tf_idf, fill = doc_id)) + geom_col(show.legend = FALSE) + labs(x = NULL, y = &quot;tf-idf&quot;) + facet_wrap(~doc_id, ncol = 2, scales = &quot;free&quot;) + coord_flip() + theme(axis.text.y = element_text(angle = 45)) #&gt; Warning in mutate_impl(.data, dots): Unequal factor levels: coercing to #&gt; character #&gt; Warning in mutate_impl(.data, dots): binding character and factor vector, #&gt; coercing into character vector #&gt; Warning in mutate_impl(.data, dots): binding character and factor vector, #&gt; coercing into character vector #&gt; Warning in mutate_impl(.data, dots): binding character and factor vector, #&gt; coercing into character vector #&gt; Warning in mutate_impl(.data, dots): binding character and factor vector, #&gt; coercing into character vector #&gt; Warning in mutate_impl(.data, dots): binding character and factor vector, #&gt; coercing into character vector #&gt; Warning in mutate_impl(.data, dots): binding character and factor vector, #&gt; coercing into character vector #&gt; Warning in mutate_impl(.data, dots): binding character and factor vector, #&gt; coercing into character vector #&gt; Warning in mutate_impl(.data, dots): binding character and factor vector, #&gt; coercing into character vector #&gt; Selecting by tf_idf 2.4 N-Grams https://www.tidytextmining.com/ngrams.html#counting-and-correlating-pairs-of-words-with-the-widyr-package We have mentioned n-grams in the intro, let’s revisit this here and take a look at the most common bigrams in the speeches. Remember this is what we get back: sotu_whole %&gt;% unnest_tokens(bigram, text, token = &quot;ngrams&quot;, n = 2) # create bigram Let’s see the most common bigrams: sotu_whole %&gt;% unnest_tokens(bigram, text, token = &quot;ngrams&quot;, n = 2) %&gt;% count(bigram, sort = TRUE) # count ocurrences and sord descending Ok, so we again need to remove the stopwords. This time let’s use dplyr’s filter function for this. And before that we will separate the two words into two columns. sotu_bigrams &lt;- sotu_whole %&gt;% unnest_tokens(bigram, text, token = &quot;ngrams&quot;, n = 2) %&gt;% separate(bigram, c(&quot;word1&quot;, &quot;word2&quot;), sep = &quot; &quot;) %&gt;% # separate into cols filter(!word1 %in% stop_words$word) %&gt;% # remove stopwords filter(!word2 %in% stop_words$word) sotu_bigrams %&gt;% count(word1, word2, sort = TRUE) (Bonus question: What happened on that June 30th?) A bigram can also be treated as a term in a document in the same way that we treated individual words. That means we can look at tf-idf values in the same way. First we will re-unite the two word columns again, and then generate the tf-idf count as above. bigram_tf_idf &lt;- sotu_bigrams %&gt;% unite(bigram, word1, word2, sep = &quot; &quot;) %&gt;% # combine columns count(president, bigram) %&gt;% bind_tf_idf(bigram, president, n) %&gt;% arrange(desc(tf_idf)) What makes the speeches of different presidents unique? Let’s pick a few presidents and plot their highest scoreing tf-idf values here. potus &lt;- c(&quot;John F. Kennedy&quot;, &quot;Richard M. Nixon&quot;, &quot;William J. Clinton&quot;, &quot;George Bush&quot;, &quot;George W. Bush&quot;, &quot;Jimmy Carter&quot;) bigram_tf_idf %&gt;% filter(president %in% potus) %&gt;% group_by(president) %&gt;% top_n(20) %&gt;% ggplot(aes(reorder(bigram, tf_idf), tf_idf, fill = president)) + geom_col(show.legend = FALSE) + labs(x = NULL, y = &quot;tf-idf&quot;) + facet_wrap(~president, scales = &quot;free&quot;, nrow = 2) + coord_flip() #&gt; Selecting by tf_idf 2.5 Co-ocurrcence Co-occurances give us a sense of words that appear in the same text, but not necessarily next to each other. For this section we will make use of the widyr package. It allows us to turn our table into a wide matrix. In our case that matrix will be made up of the individual words and the cell values will be the counts of how many times they co-occur. Then we will turn the matrix back into a tidy form, where each row contains the word pairs and the count of their co-occurrence. This lets us count common pairs of words co-appearing within the same speech. The function which helps us do this is the pairwise_count() function. Since processing the entire corpus would take too long here, we will only look at the last 20 words of each speech. library(widyr) # extract last 100 words from text sotu_whole$speech_end &lt;- word(sotu_whole$text, -100, end = -1) sotu_word_pairs &lt;- sotu_whole %&gt;% unnest_tokens(word, speech_end) %&gt;% filter(!word %in% stop_words$word) %&gt;% # remove stopwords pairwise_count(word, doc_id, sort = TRUE, upper = FALSE) # don&#39;t include upper triangle of matrix To plot the co-ocurrcance network, we use the igraph library to convert our table into a network graph and ggraph which adds functionality to ggplot and makes it easier create a network plot. library(igraph) #&gt; #&gt; Attaching package: &#39;igraph&#39; #&gt; The following objects are masked from &#39;package:dplyr&#39;: #&gt; #&gt; as_data_frame, groups, union #&gt; The following objects are masked from &#39;package:purrr&#39;: #&gt; #&gt; compose, simplify #&gt; The following object is masked from &#39;package:tidyr&#39;: #&gt; #&gt; crossing #&gt; The following object is masked from &#39;package:tibble&#39;: #&gt; #&gt; as_data_frame #&gt; The following objects are masked from &#39;package:stats&#39;: #&gt; #&gt; decompose, spectrum #&gt; The following object is masked from &#39;package:base&#39;: #&gt; #&gt; union library(ggraph) sotu_word_pairs %&gt;% filter(n &gt;= 10) %&gt;% # only word pairs that occur 10 or more times graph_from_data_frame() %&gt;% #convert to graph ggraph(layout = &quot;fr&quot;) + # place nodes according to the force-directed algorithm of Fruchterman and Reingold geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = &quot;tomato&quot;) + geom_node_point(size = 5) + geom_node_text(aes(label = name), repel = TRUE, point.padding = unit(0.2, &quot;lines&quot;)) + theme_void() There are alternative approaches for this as well. See for example the findAssocs function in the tm package. 2.6 Document-Term Matrix A document-term matrix (DTM) is a format which is frequently used in textanalysis. It is a matrix where we can see the counts of each term per document. In a DTM each row represents a document, each column represents a term, and the cell values are the counts of the ocurrences of the term for the particular document. tidytext provides functionality to convert to and from DTMs, if for example, your analyis requires specific functions that require you to use a different R package which only works with DTM objects. The cast_dtm function can be used to create a DTM object from a tidy table. Let’s assume that for some reason we want to use the findAssoc function from the tm package. First we use dplyr to create a table with the document name, the term, and the count. # make a table with document, term, count tidy_sotu_words %&gt;% count(doc_id, word) Now we cast it as a DTM. sotu_dtm &lt;- tidy_sotu_words %&gt;% count(doc_id, word) %&gt;% cast_dtm(doc_id, word, n) class(sotu_dtm) Finally, let’s use it in the tm package. library(tm) #&gt; Loading required package: NLP #&gt; #&gt; Attaching package: &#39;NLP&#39; #&gt; The following object is masked from &#39;package:ggplot2&#39;: #&gt; #&gt; annotate # look at the terms with tm function Terms(sotu_dtm) %&gt;% tail() # most frequent terms findFreqTerms(sotu_dtm, lowfreq = 5000) # find terms associated with ... findAssocs(sotu_dtm, &quot;citizen&quot;, corlimit = 0.5) Conversely, tidytext implements the tidy function (originally from the broom package) to import DocumentTermMatrix objects. Note that it only takes the cells from the DTM that are not 0, so there will be no rows with 0 counts. 2.7 Sentiment analysis tidytext comes with a dataset sentiments which contains several sentiment lexicons, where each word is attributed a certain sentiment, like this: sentiments Here we will take a look at how the sentiment of the speeches change over time. We will use the lexicon from Bing Liu and collaborators, which assigns positive/negative labels for each word: bing_lex &lt;- get_sentiments(&quot;bing&quot;) bing_lex Since this is a regular tibble, we can use these sentiments and join them to the words of our speeches. We will use inner_join from dplyr. Since our columns to join on have the same name (word) we don’t need to explicitly name it. tidy_sotu_words %&gt;% inner_join(bing_lex) %&gt;% # join count(year, sentiment) # group by year and sentiment #&gt; Joining, by = &quot;word&quot; Finally we can visualize it like this: tidy_sotu_words %&gt;% inner_join(bing_lex) %&gt;% # join count(year, sentiment) %&gt;% # group by year and sentiment ggplot(aes(year, n, color = sentiment)) + geom_line() + scale_x_continuous(breaks = seq(1790, 2016, by = 10)) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) #&gt; Joining, by = &quot;word&quot; TODO: length over time…other similar measures ? TODO: variation between the different presidents? TODO: topic modeling ? "]
]
